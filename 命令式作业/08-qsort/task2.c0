//
#use < string>
bool is_sorted(string[] A, int lower, int upper)
//@requires 0 <= lower && lower <= upper && upper <= \length(A);
{
    for (int i = lower; i < upper - 1; i++)
    //@loop_invariant 0 <= i && i <= \length(A) -1;
    {
        if (string_compare(A[i], A[i + 1]) > 0)
            return false;
    }
    return true;
}

int count_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures 0 <= \result && \result <= n;
{
    int rei = n < 1 ? 0 : 1;
    for (int i = 1; i < n; i++)
    //@loop_invariant 0 <= i-1 && i <= \length(A);
    {
        if (!string_equal(A[i - 1], A[i]))
            rei++;
    }
    return rei;
}
