/*
 * Hash tables (dynamically size adjusting)
 *
 * 15-122 Principles of Imperative Computation, Fall 2012
 */

#use <conio>
#use <string>
#use <util>

/*************************/
/* client-side interface */
/*************************/
// typedef ______* htelem;
// typedef _______ htkey;

int hash(htkey k);

bool htkey_equal(htkey k1, htkey k2);

htkey htelem_key(htelem e)
//@requires e != NULL;
  ;

/**************************/
/* library side interface */
/**************************/
struct ht_header;
typedef struct ht_header* ht;

ht ht_new(int capacity)
//@requires capacity > 0;
  ;
htelem ht_lookup(ht H, htkey k); /* O(1) avg. */
void ht_insert(ht H, htelem e)   /* O(1) avg. */
//@requires e != NULL;
  ;
int ht_size(ht H);               /* O(1) */
void ht_stats(ht H);             /* Print debugging info about the table */  

/*******************************/
/* library-side implementation */
/*******************************/
struct chain_node {
  htelem data;                   /* data != NULL */
  struct chain_node* next;
};
typedef struct chain_node chain;

int chain_length(chain* p) {
  int i = 0;
  while (p != NULL) {
    i++;
    p = p->next;
  }
  return i;
}

struct ht_header {
  int size;                     /* size >= 0 */
  int capacity;                 /* capacity > 0 */
  chain*[] table;               /* \length(table) == capacity */
};

bool is_ht(ht H) {
  if (H == NULL) return false;
  if (!(H->size >= 0)) return false;
  if (!(H->capacity > 0)) return false;
  //@assert \length(H->table) == H->capacity;
  /* check that each element of table is a valid chain */
  /* includes checking that all elements are non-null */
  return true;
}

ht ht_new(int capacity)
//@requires capacity > 0;
//@ensures is_ht(\result);
{
  ht H = alloc(struct ht_header);
  H->size = 0;
  H->capacity = capacity;
  H->table = alloc_array(chain*, capacity);
  /* initialized to NULL */
  return H;
}

int ht_size(ht H) 
//@requires is_ht(H);
{
  return H->size;
}

/* ht_lookup(H, k) returns NULL if key k not present in H */
htelem ht_lookup(ht H, htkey k)
//@requires is_ht(H);
{
  int i = abs(hash(k) % H->capacity);
  chain* p = H->table[i];
  while (p != NULL)
    // loop invariant: p points to chain
    {
    //@assert p->data != NULL;
    if (htkey_equal(htelem_key(p->data), k))
      return p->data;
    else
      p = p->next;
  }
  /* not in chain */
  return NULL;
}

void ht_resize(ht H, int new_capacity)
//@requires is_ht(H);
//@requires new_capacity > 0;
//@ensures is_ht(H);
//@ensures H->capacity == new_capacity;
{
  print("(resizing ht to capacity "); printint(new_capacity); println("");
  chain*[] old_table = H->table;
  chain*[] new_table = alloc_array(chain*, new_capacity);
  /* new_table is initialized to all NULL */
  for (int i = 0; i < H->capacity; i++)
    //@loop_invariant 0 <= i;
    {
      chain* p = old_table[i];
      while (p != NULL) {
        chain* q = p->next;   /* save p->next */
        htelem e = p->data;
        //@assert e != NULL;
        int h = abs(hash(htelem_key(e)) % new_capacity);
        p->next = new_table[h];
        new_table[h] = p;
        p = q;
      }
    }
  /* change ht H in place */
  /* H->size remains unchanged */
  H->capacity = new_capacity;
  H->table = new_table;
  return;
}

void ht_insert(ht H, htelem e)
//@requires is_ht(H);
//@requires e != NULL;
//@ensures is_ht(H);
//@ensures ht_lookup(H, htelem_key(e)) != NULL;
{
  htkey k = htelem_key(e);
  int i = abs(hash(k) % H->capacity);

  chain* p = H->table[i];
  while (p != NULL)
    // loop invariant: p points to chain
    {
      //@assert p->data != NULL;
      if (htkey_equal(htelem_key(p->data), k)) {
        /* overwrite existing element */
        p->data = e;
        return;
      } else {
        p = p->next;
      }
    }
  //@assert p == NULL;

  /* prepend new element */
  chain* q = alloc(struct chain_node);
  q->data = e;
  q->next = H->table[i];
  H->table[i] = q;
  (H->size)++;

  /* resize hash table if load factor would be > 1 */
  if (H->size > H->capacity && H->capacity < int_max()/2) {
    /* load factor > 1 */
    assert(H->capacity < int_max()/2);
    ht_resize(H, 2*H->capacity);
  }

  return;
}

// Debugging: report the distribution about the hashtable
void ht_stats(ht H) 
//@requires is_ht(H);
{
  int max = 0;
  int[] A = alloc_array(int, 11);
  for(int i = 0; i < H->capacity; i++) {
    int j = chain_length(H->table[i]);
    if (j > 9) A[10]++;
    else A[j]++;
    if (j > max) max = j;
  }

  println("Hash table distribution: how many chains have size... ");
  for(int i = 0; i < 10; i++) {
    print("..."); printint(i); print(":   "); printint(A[i]); print("\n");
  }
  print("...10+: "); printint(A[10]); print("\n");
  print("Longest chain: "); printint(max); print("\n");
}

